import streamlit as st
import folium
from streamlit_folium import st_folium
import heapq
import math
from collections import defaultdict
import json

# -------------------------------
# üåç Haversine Distance Function
# -------------------------------
def haversine(lat1, lng1, lat2, lng2):
    R = 6371000  # Earth radius in meters
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lng2 - lng1)

    a = math.sin(delta_phi / 2) ** 2 + \
        math.cos(phi1) * math.cos(phi2) * \
        math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    return R * c  # in meters

# -------------------------------
# üß≠ Load & Build Graph from JSON
# -------------------------------
@st.cache_data
def build_graph_from_json(json_data):
    graph = defaultdict(dict)  # node_id -> {neighbor: distance}
    node_coords = {}           # node_id -> (lat, lng)
    coord_to_node = {}         # (lat, lng) -> node_id (for deduplication)
    node_counter = 0

    paths = json_data["paths"]

    for path_id, coords in paths.items():
        prev_node = None
        for i, (lng, lat) in enumerate(coords):  # Note: your data is [lng, lat]!
            # Swap to (lat, lng) for consistency
            point = (lat, lng)

            # Deduplicate nodes at same coordinate
            if point in coord_to_node:
                node_id = coord_to_node[point]
            else:
                node_id = f"node_{node_counter}"
                node_coords[node_id] = point
                coord_to_node[point] = node_id
                node_counter += 1

            if prev_node is not None:
                dist = haversine(prev_point[0], prev_point[1], point[0], point[1])
                # Bidirectional edges
                graph[prev_node][node_id] = dist
                graph[node_id][prev_node] = dist

            prev_node = node_id
            prev_point = point

    return graph, node_coords

# -------------------------------
# üîç Find Nearest Node to (lat, lng)
# -------------------------------
def find_nearest_node(target_lat, target_lng, node_coords):
    nearest_id = None
    min_dist = float('inf')
    for node_id, (lat, lng) in node_coords.items():
        d = haversine(target_lat, target_lng, lat, lng)
        if d < min_dist:
            min_dist = d
            nearest_id = node_id
    return nearest_id, min_dist

# -------------------------------
# üö∂ Dijkstra‚Äôs Shortest Path
# -------------------------------
def dijkstra(graph, start_node, end_node):
    pq = [(0, start_node, [])]  # (cost, current, path)
    visited = set()

    while pq:
        cost, current, path = heapq.heappop(pq)
        if current in visited:
            continue
        visited.add(current)
        path = path + [current]

        if current == end_node:
            return path

        for neighbor, weight in graph.get(current, {}).items():
            if neighbor not in visited:
                heapq.heappush(pq, (cost + weight, neighbor, path))

    return None  # No path found

# -------------------------------
# üó∫Ô∏è Create Folium Map with Route
# -------------------------------
def create_route_map(route_coords, start_point, end_point):
    if not route_coords:
        # Fallback: center on start
        m = folium.Map(location=start_point, zoom_start=16)
        folium.Marker(start_point, popup="Start (No Path Found)", icon=folium.Icon(color="red")).add_to(m)
        return m

    # Center map on route
    avg_lat = sum(p[0] for p in route_coords) / len(route_coords)
    avg_lng = sum(p[1] for p in route_coords) / len(route_coords)
    m = folium.Map(location=[avg_lat, avg_lng], zoom_start=16)

    # Draw route
    folium.PolyLine(route_coords, color="blue", weight=5, opacity=0.8).add_to(m)

    # Markers
    folium.Marker(route_coords[0], popup="Start", icon=folium.Icon(color="green")).add_to(m)
    folium.Marker(route_coords[-1], popup="End", icon=folium.Icon(color="red")).add_to(m)

    # Optional: mark all nodes
    # for coord in route_coords[1:-1]:
    #     folium.CircleMarker(coord, radius=3, color="blue", fill=True).add_to(m)

    return m

# -------------------------------
# üì¶ Your Path Data (Embedded)
# -------------------------------
PATH_DATA = {
    "paths": {
        "path_1": [
            [-0.7167694762790855, 37.1473851799965],
            [-0.7166970623018618, 37.14736372232438],
            [-0.7165938053312044, 37.147318124771125],
            [-0.7164905483605469, 37.14727252721787],
            [-0.716383268387358, 37.1472054719925],
            [-0.7162679424133679, 37.14714646339417],
            [-0.7161848004295674, 37.147098183631904],
            [-0.7161016584457669, 37.147049903869636],
            [-0.7159863324647033, 37.14698821306229],
            [-0.7158897804783209, 37.146939933300025],
            [-0.7157905464902083, 37.146939933300025],
            [-0.7157342244959998, 37.14700162410737],
            [-0.7156484005034847, 37.147076725959785]
        ],
        "path_2": [
            [-0.7164905483605469, 37.14727252721787],
            [-0.7164476363713693, 37.14738920331002],
            [-0.7164047243821917, 37.14750587940217],
            [-0.7163457203961382, 37.14763462543488],
            [-0.7163135364034297, 37.147701680660255],
            [-0.7162670484130881, 37.14779734611512],
            [-0.7162205604227466, 37.147893011569984],
            [-0.716174072432405, 37.14798867702485]
        ],
        "path_3": [
            [-0.7166970623018618, 37.14736372232438],
            [-0.7165522343439923, 37.1474575996399],
            [-0.7164726683638047, 37.14753895998002],
            [-0.7163931023836172, 37.14762032032014],
            [-0.7163135364034297, 37.147701680660255],
            [-0.7162169844239427, 37.14772582054139],
            [-0.7160775204499792, 37.147664129734046]
        ],
        "path_4": [
            [-0.7156296265049105, 37.147082090377815],
            [-0.7156993584987049, 37.14715853333474],
            [-0.7157690904924994, 37.147234976291664],
            [-0.7158441864840481, 37.1472778916359],
            [-0.7158817344793645, 37.14732617139817],
            [-0.7158790524797081, 37.1474039554596],
            [-0.7158790524797081, 37.147476375103004],
            [-0.7159219644740065, 37.14750856161118],
            [-0.7159970604630616, 37.14750587940217],
            [-0.7160882484481212, 37.1475836634636],
            [-0.7160641104522572, 37.14765071868897],
            [-0.7160104704606756, 37.14773923158646],
            [-0.715956830469094, 37.147827744483955]
        ],
        "path_5": [
            [-0.716571008338788, 37.14840710163117],
            [-0.7164825023626338, 37.14825153350831],
            [-0.7164074063809194, 37.14818313717843],
            [-0.7163323103992049, 37.14811474084855],
            [-0.7162518504160658, 37.148053050041206],
            [-0.7161713904329268, 37.14799135923386],
            [-0.7160641104510104, 37.147912234067924],
            [-0.715956830469094, 37.147833108901985],
            [-0.7158736884796512, 37.14777946472169],
            [-0.7157905464902083, 37.14772582054139],
            [-0.7157100864975594, 37.1476735174656],
            [-0.7156296265049105, 37.14762121438981],
            [-0.7155505075093862, 37.147564888000495],
            [-0.715471388513862, 37.14750856161118],
            [-0.7153319245172148, 37.1474039554596],
            [-0.7152621925167795, 37.14733690023423],
            [-0.715192460516344, 37.14726984500886],
            [-0.7151522305153027, 37.14714646339417],
            [-0.7151146825140197, 37.147060632705696]
        ],
        "path_6": [
            [-0.7167587482825337, 37.14738786220551],
            [-0.7167415834878678, 37.147483885288246],
            [-0.7167244186932018, 37.14757990837098],
            [-0.7167072538985357, 37.14767593145371],
            [-0.7166900891038698, 37.147771954536445],
            [-0.7166729243092038, 37.14786797761918],
            [-0.7166525411151207, 37.14797312021256],
            [-0.7166321579210375, 37.148078262805946],
            [-0.7166117747269543, 37.14818340539933],
            [-0.7165913915328711, 37.14828854799271],
            [-0.716571008338788, 37.1483936905861],
            [-0.7165549163432543, 37.14851707220078]
        ],
        "path_7": [
            [-0.7165549163432543, 37.14851707220078],
            [-0.7164610463672021, 37.148584127426155],
            [-0.71636717639115, 37.14865118265153],
            [-0.7162907394078135, 37.14870616793633],
            [-0.716214302424477, 37.14876115322114],
            [-0.716102999444183, 37.14882150292397],
            [-0.7159916964638888, 37.14888185262681],
            [-0.7160024244622344, 37.14894890785218],
            [-0.7160319264575639, 37.14902132749558],
            [-0.7159353744721483, 37.149096429348]
        ],
        "path_8": [
            [-0.71636717639115, 37.148667275905616],
            [-0.7164169849489942, 37.148752723421374],
            [-0.7164667935068385, 37.14883817093714],
            [-0.7165166020646827, 37.1489236184529],
            [-0.7165664106225269, 37.149009065968656],
            [-0.7166162191803711, 37.149094513484414],
            [-0.7166660277382154, 37.14917996100018],
            [-0.7167158362960596, 37.14926540851594],
            [-0.7167281734921431, 37.149365723133094],
            [-0.7167405106882266, 37.14946603775025],
            [-0.71675284788431, 37.14956635236741],
            [-0.7167651850803936, 37.149666666984565],
            [-0.7167775222764771, 37.14976698160172],
            [-0.7167678670795563, 37.14985710382462],
            [-0.7167582118826356, 37.14994722604752],
            [-0.7167485566857148, 37.15003734827042],
            [-0.716738901488794, 37.150127470493324],
            [-0.7167292462918733, 37.150217592716224],
            [-0.7167322262909303, 37.15031504631043],
            [-0.7167352062899873, 37.15041249990464],
            [-0.7167381862890443, 37.15050995349885],
            [-0.7167411662881013, 37.150607407093055],
            [-0.7167441462871583, 37.15070486068726],
            [-0.7167471262862153, 37.15080231428147],
            [-0.7167501062852722, 37.15089976787568],
            [-0.7167530862843293, 37.150997221469886],
            [-0.7167560662833863, 37.151094675064094],
            [-0.7167399742885014, 37.151193916797645]
        ],
        "path_9": [
            [-0.7166782883075877, 37.14949607849122],
            [-0.7167507022851041, 37.14965701103211]
        ],
        "path_10": [
            [-0.7167721582782203, 37.14978843927384],
            [-0.7166863343051447, 37.14978307485581],
            [-0.7166112383255359, 37.14970327913762],
            [-0.7165361423459269, 37.149623483419425],
            [-0.7164610463663179, 37.14954368770123],
            [-0.716385950386709, 37.14946389198304],
            [-0.7163121954031371, 37.14938879013062],
            [-0.7162384404195651, 37.149313688278205],
            [-0.7161848004300191, 37.149234563112266],
            [-0.716131160440473, 37.14915543794633],
            [-0.7160238804588619, 37.14904814958573]
        ],
        "path_11": [
            [-0.7167292462918733, 37.150217592716224],
            [-0.7165683263395387, 37.15028196573258],
            [-0.7164932303598344, 37.15025246143342],
            [-0.7164346733729433, 37.150169312953956],
            [-0.7163761163860521, 37.150086164474494],
            [-0.7163175593991611, 37.15000301599503],
            [-0.71625900241227, 37.14991986751557],
            [-0.7162004454253789, 37.14983671903611],
            [-0.7161418884384878, 37.14975357055665],
            [-0.7160891424464524, 37.149675786495216],
            [-0.716036396454417, 37.149598002433784],
            [-0.7159836504623815, 37.14952021837235],
            [-0.7159309044703462, 37.14944243431092],
            [-0.7158781584783108, 37.14936465024949],
            [-0.7158254124862754, 37.149286866188056],
            [-0.7157704314913607, 37.14920639991761],
            [-0.7157154504964459, 37.14912593364716],
            [-0.7156604695015312, 37.149045467376716],
            [-0.7156054885066164, 37.14896500110627],
            [-0.7156054885066164, 37.14896500110627],
            [-0.7155491665101433, 37.14895963668824],
            [-0.715433840515187, 37.14903742074967],
            [-0.7153480165170487, 37.149045467376716]
        ],
        "path_13": [
            [-0.7168070242668194, 37.15125292539597],
            [-0.7167265642898939, 37.151192307472236],
            [-0.7166461043129684, 37.1511316895485],
            [-0.7165656443360428, 37.15107107162476],
            [-0.7164851843591172, 37.151010453701026],
            [-0.7164047243821917, 37.15094983577729],
            [-0.7163457203957628, 37.15087741613389],
            [-0.7162867164093341, 37.150804996490486],
            [-0.7162666014135238, 37.15069971978665],
            [-0.7162464864177136, 37.15059444308282],
            [-0.7162263714219034, 37.15048916637898],
            [-0.7162062564260931, 37.15038388967515],
            [-0.7161606624347402, 37.15026855468751],
            [-0.7161150684433872, 37.15015321969987],
            [-0.7160637273077425, 37.15007888419288],
            [-0.7160123861720977, 37.1500045486859],
            [-0.715961045036453, 37.14993021317891],
            [-0.7159097039008083, 37.14985587767193],
            [-0.7158583627651636, 37.149781542164945],
            [-0.7158070216295188, 37.149707206657965],
            [-0.7157556804938741, 37.14963287115098],
            [-0.7157008910685623, 37.149550872189664],
            [-0.7156461016432504, 37.14946887322835],
            [-0.7155913122179386, 37.14938687426704],
            [-0.7155365227926268, 37.14930487530573],
            [-0.715481733367315, 37.14922287634442],
            [-0.7154269439420031, 37.149140877383104],
            [-0.7153721545166913, 37.14905887842179],
            [-0.7153024225168602, 37.1489891409874],
            [-0.715232690517029, 37.148919403553016],
            [-0.7151723455154672, 37.148851007223136],
            [-0.7151120005139053, 37.14878261089326],
            [-0.715047632510499, 37.1487008035183],
            [-0.7149832645070926, 37.14861899614335],
            [-0.7148893944998328, 37.14851170778275],
            [-0.7147982064891379, 37.1484723687172],
            [-0.7147070184784431, 37.14843302965165],
            [-0.7146158304677482, 37.1483936905861],
            [-0.7145890104637294, 37.148348093032844],
            [-0.7146158304675192, 37.14826092123986],
            [-0.7146426504713091, 37.148173749446876],
            [-0.7146694704750991, 37.14808657765389],
            [-0.7146962904788889, 37.14799940586091],
            [-0.7147338384835943, 37.14791893959046]
        ],
        "path_15": [
            [-0.714814546364534, 37.147957642222316],
            [-0.7148564526163115, 37.14779771550067],
            [-0.7149047286196931, 37.14779100997859],
            [-0.7149496521223785, 37.14775144739825],
            [-0.7149516636224961, 37.1477548001593],
            [-0.7150167021255684, 37.14758917376366],
            [-0.7150678246986607, 37.14758230736107],
            [-0.7151683997013337, 37.147318780328476]
        ],
        "path_16": [
            [-0.7151342041984061, 37.147392541075874],
            [-0.7149994336921439, 37.14735431959939],
            [-0.7148948356847321, 37.147520616556065],
            [-0.7148606401815373, 37.14777676750759]
        ],
        "path_17": [
            [-0.715629937051089, 37.14766494952171],
            [-0.7154801166920283, 37.147742710452036]
        ],
        "path_18": [
            [-0.7155711467841884, 37.147652621569335],
            [-0.7153653808441333, 37.147627965664604],
            [-0.7151118452974426, 37.14755611289417],
            [-0.7150919112127436, 37.147599173868905]
        ],
        "path_19": [
            [-0.7159448909055013, 37.14789053584701],
            [-0.7158316653217964, 37.148081120543985],
            [-0.7157431579976851, 37.14820631634759],
            [-0.715834854773609, 37.14846228993569],
            [-0.7158149206925866, 37.14862895187662],
            [-0.7157694709863144, 37.148637723556654]
        ],
        "path_20": [
            [-0.7160191315032673, 37.14880272867365],
            [-0.7158564693981494, 37.1486583946657]
        ],
        "path_21": [
            [-0.7157639752576376, 37.14854516024594],
            [-0.7155439148734409, 37.14831401249866],
            [-0.7153860369315764, 37.148204765208476],
            [-0.7152209827141457, 37.148170475912195],
            [-0.7148175168261874, 37.14798786547217]
        ],
        "path_22": [
            [-0.7146644577932663, 37.14844453949386],
            [-0.7146293738007091, 37.14861279626549]
        ],
        "path_23": [
            [-0.7157269782570342, 37.14997082391014],
            [-0.7149009222772399, 37.150788897605175]
        ]
    }
}

# -------------------------------
# üöÄ Streamlit App
# -------------------------------
st.set_page_config(page_title="Custom Path Finder", layout="wide")
st.title("üìç Custom Path Finder (Offline Network)")

# Build graph once
graph, node_coords = build_graph_from_json(PATH_DATA)

# Sidebar inputs
st.sidebar.header("üìç Start & End Points")
start_lat = st.sidebar.number_input("Start Latitude", value=37.147385, format="%.6f")
start_lng = st.sidebar.number_input("Start Longitude", value=-0.716769, format="%.6f")
end_lat = st.sidebar.number_input("End Latitude", value=37.150217, format="%.6f")
end_lng = st.sidebar.number_input("End Longitude", value=-0.716729, format="%.6f")

if st.sidebar.button("üîç Find Route"):
    with st.spinner("Finding best route through your network..."):
        # Snap to nearest nodes
        start_node, start_dist = find_nearest_node(start_lat, start_lng, node_coords)
        end_node, end_dist = find_nearest_node(end_lat, end_lng, node_coords)

        st.info(f"Start snapped to node {start_node} ({start_dist:.1f}m away)")
        st.info(f"End snapped to node {end_node} ({end_dist:.1f}m away)")

        # Find path
        node_path = dijkstra(graph, start_node, end_node)

        if node_path is None:
            st.error("‚ùå No path found between selected points.")
            route_coords = []
        else:
            route_coords = [node_coords[node_id] for node_id in node_path]
            total_distance = sum(
                haversine(route_coords[i][0], route_coords[i][1],
                         route_coords[i+1][0], route_coords[i+1][1])
                for i in range(len(route_coords)-1)
            )
            st.success(f"‚úÖ Route found! Distance: {total_distance/1000:.2f} km")

        # Create and display map
        m = create_route_map(route_coords, (start_lat, start_lng), (end_lat, end_lng))
        st_folium(m, width=800, height=600)

        # Optional: Show route as table
        if route_coords:
            with st.expander("üìä View Route Coordinates"):
                for i, (lat, lng) in enumerate(route_coords):
                    st.write(f"Step {i+1}: Lat {lat:.6f}, Lng {lng:.6f}")

# Footer
st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using Streamlit + Folium. Offline pathfinding on your custom network.")
