import streamlit as st
import folium
from streamlit_folium import st_folium
from geopy.distance import geodesic
import json
import random

st.set_page_config(layout="wide")
st.title("Smart Path Router - Murang'a University")

# -------------------------
# Path data (23 paths)
# -------------------------
paths_data = {
    "paths": {
        "path1": [[-0.714814546364534, 37.147957642222316], [-0.7148564526163115, 37.14779771550067], [-0.7149047286196931, 37.14779100997859], [-0.7149496521223785, 37.14775144739825], [-0.7149516636224961, 37.1477548001593], [-0.7150167021255684, 37.14758917376366], [-0.7150678246986607, 37.14758230736107], [-0.7151683997013337, 37.147318780328476]],
        "path2": [[-0.7151342041984061, 37.147392541075874], [-0.7149994336921439, 37.14735431959939], [-0.7148948356847321, 37.147520616556065], [-0.7148606401815373, 37.14777676750759]],
        "path3": [[-0.715629937051089, 37.14766494952171], [-0.7154801166920283, 37.147742710452036]],
        "path4": [[-0.7155711467841884, 37.147652621569335], [-0.7153653808441333, 37.147627965664604], [-0.7151118452974426, 37.14755611289417], [-0.7150919112127436, 37.147599173868905]],
        "path5": [[-0.7159448909055013, 37.14789053584701], [-0.7158316653217964, 37.148081120543985], [-0.7157431579976851, 37.14820631634759], [-0.715834854773609, 37.14846228993569], [-0.7158149206925866, 37.14862895187662], [-0.7157694709863144, 37.148637723556654]],
        "path6": [[-0.7160191315032673, 37.14880272867365], [-0.7158564693981494, 37.1486583946657]],
        "path7": [[-0.7157639752576376, 37.14854516024594], [-0.7155439148734409, 37.14831401249866], [-0.7153860369315764, 37.148204765208476], [-0.7152209827141457, 37.148170475912195], [-0.7148175168261874, 37.14798786547217]],
        "path8": [[-0.7146644577932663, 37.14844453949386], [-0.7146293738007091, 37.14861279626549]],
        "path9": [[-0.7157269782570342, 37.14997082391014], [-0.7149009222772399, 37.150788897605175]],
        "path10": [[-0.7159173329483964, 37.1470061058908], [-0.7158174284628951, 37.14693972121571], [-0.715769152469106, 37.146941062320245], [-0.715749037471556, 37.14698867153169], [-0.7157295929738374, 37.14701549362263]],
        "path11": [[-0.7154766574239293, 37.14682634967069], [-0.7153582225026168, 37.14695501424384], [-0.7153020774022254, 37.14705089889933], [-0.7152338966264741, 37.1471674164201], [-0.7151909913731066, 37.14728393377353]],
        "path12": [[-0.7152055853241823, 37.1473850027459], [-0.7150647074745291, 37.14770524034088]],
        "path13": [[-0.7150050726810458, 37.147806644118225], [-0.7149254075868121, 37.14790051061996], [-0.7148578967728745, 37.147999264166076], [-0.7147748900527658, 37.14815191180869]],
        "path14": [[-0.7146976244656853, 37.14827710767264], [-0.7146342266400682, 37.14840096247207]],
        "path15": [[-0.7145533978067816, 37.14855850568716], [-0.7145257641730806, 37.14867202901748], [-0.7145164647786356, 37.14880624892783], [-0.714498797372166, 37.14893444461944]],
        "path16": [[-0.7145972016668026, 37.1490358482537], [-0.7146734500489338, 37.149112136058166], [-0.7147948500638718, 37.149243324026556], [-0.7149157179071127, 37.14937886065741]],
        "path17": [[-0.715003981363573, 37.14946774964809], [-0.7150749065728329, 37.14952820482844], [-0.7151837818702617, 37.14965705654678], [-0.715305750792547, 37.14979125070464], [-0.715435304718879, 37.14993178801732]],
        "path18": [[-0.7155404727362438, 37.150041508006006], [-0.7156594638578506, 37.15016546854279], [-0.7157884247062244, 37.15029275142029], [-0.7158773933262858, 37.15038341964269]],
        "path19": [[-0.7159549834762267, 37.15046175803266], [-0.7160832870914332, 37.15058980843865], [-0.7162341626969112, 37.150737222364545]],
        "path20": [[-0.716359185541801, 37.1508624180171], [-0.7164747746239923, 37.15098466197182], [-0.7165615396982426, 37.15109200093427]],
        "path21": [[-0.7166660539972796, 37.15121619619958], [-0.7167830211157236, 37.1513669377052]],
        "path22": [[-0.7168978999407453, 37.15149445502554], [-0.717019300084869, 37.15162564238514]],
        "path23": [[-0.7171170937444892, 37.15172997839204], [-0.7171987845153793, 37.15181214953094], [-0.7172742943497761, 37.15187081606311]]
    }
}
paths = list(paths_data["paths"].values())

# -------------------------
# Algorithm
# -------------------------
def nearest_point(coord, candidates):
    return min(candidates, key=lambda c: geodesic(coord, c).meters)

def find_route(paths, current, destination):
    route = [current]
    used = set()
    current_point = current

    while True:
        # nearest path not yet used
        best_path, best_dist, best_end = None, float("inf"), None
        for i, path in enumerate(paths):
            if i in used: continue
            for end in [path[0], path[-1]]:
                dist = geodesic(current_point, end).meters + geodesic(end, destination).meters
                if dist < best_dist:
                    best_path, best_dist, best_end = i, dist, end
        if best_path is None:
            break
        used.add(best_path)
        route.extend(paths[best_path])
        current_point = paths[best_path][-1]
        if geodesic(current_point, destination).meters < 10:
            break
    route.append(destination)
    return route

# -------------------------
# Inputs
# -------------------------
st.subheader("Enter Coordinates")
col1, col2 = st.columns(2)
with col1:
    current = st.text_input("Current Location (lat, lon)", "-0.7159, 37.1470")
with col2:
    destination = st.text_input("Destination (lat, lon)", "-0.7172, 37.1518")

if st.button("Compute Route"):
    try:
        current = tuple(map(float, current.split(",")))
        destination = tuple(map(float, destination.split(",")))
        route = find_route(paths, current, destination)

        # -------------------------
        # Draw map once
        # -------------------------
        m = folium.Map(location=current, zoom_start=17, tiles="OpenStreetMap")
        # Draw all paths
        for path in paths:
            color = "#" + ''.join(random.choices("0123456789ABCDEF", k=6))
            folium.PolyLine(path, color=color, weight=2, opacity=0.5).add_to(m)

        # Draw route
        folium.Marker(current, popup="Start", icon=folium.Icon(color="green")).add_to(m)
        folium.Marker(destination, popup="End", icon=folium.Icon(color="red")).add_to(m)
        folium.PolyLine(route, color="blue", weight=5, opacity=0.9).add_to(m)

        st_folium(m, width=800, height=600)

        # Show JSON
        route_json = json.dumps({"route": route}, indent=2)
        st.subheader("📍 Computed Route JSON")
        st.code(route_json, language="json")
        st.download_button("⬇️ Download Route JSON", route_json, "route.json", "application/json")

    except Exception as e:
        st.error(f"❌ Invalid input: {e}")
